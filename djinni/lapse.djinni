
lapse_event = enum {
	none;
	camera_begin;
	camera_btn_capture;
	camera_btn_pause;
	camera_btn_stop;
	camera_btn_resume;
	camera_btn_lapse;
	camera_btn_ratio;
	camera_btn_more;
	camera_btn_library;
	camera_btn_switch;
	camera_btn_lapse_stop;
	camera_btn_lapse_resume;
	camera_end;

	review_open;

	projects_begin;
	projects_btn_back;
	projects_show;
	projects_list_select;
	projects_list_update_delete;
	projects_list_update_add;
	projects_publish;
	projects_end;

	ui_end;
}

lapse_ui_scene = enum {
	camera;
	library;
}

video_info = record {
	interval:f32;
	fps:i32;
	resolution:i32;
	exposure:i32;
	iso:i32;
}



uilogic_gen = interface + c {
	static instance():uilogic_gen;
	initialize(scene:lapse_ui_scene):bool;
	getEventStr(event:lapse_event):string;
}

logic_gen = interface + c {
	static instance():logic_gen;
	initialize(config:string):bool;
	getProjectsPath():string;

	captureStart();
	capturePause();
	captureResume();
	captureStop();
	lapseStop();
	lapseResume();
}

capture_quick_mode = record {
	const TRAFFIC_FLOW:string = "traffic_flow";
	const WIND_SKY:string = "wind_sky";
	const SUN_RISE_SET:string = "sun_rise_set";
	const NO_WIND_SKY:string = "no_wind_sky";
	const FLOWERS_BLOOM_FADE:string = "flowers_bloom_fade";
	const DAY_TURN_NIGHT:string = "day_turn_night";
}

config_key_value = record {
	const VIDEO_INTERVAL:string = "interval";
	const VIDEO_INTERVAL_UNIT:string = "interval_unit";
	const VIDEO_FPS:string = "fps";
	const VIDEO_BITRATE:string = "video_bitrate";
	const CAPTURE_MODE:string = "capture_mode";
	const CAPTURE_MODE_VIDEO:string = "video";
	const CAPTURE_MODE_PHOTO:string = "photo";
	const CAPTURE_MODE_LINE:string = "capture_video_line";
	const CAPTURE_IMMEDIATE_LINE:string = "capture_immediate_line";
}

data_gen = interface +c {
	static instance():data_gen;

	initialize(config:string):bool;

	getProjectsDir():string;
	getCaptureMode():string;
	setCaptureMode(mode:string);

	getCaptureIntevalMillsec():i32;
	getCaptureInteval():i32;
	getCaptureIntevalUnit():string;
	setCaptureInteval(value:i32, unit:string);
	setCaptureIntervalQuickMode(mode:string);
	getCaptureIntervalQuickMode():string;

	getFps():i32;
	getBitrate():i32;
	getResolution():i32;
	setFps(fps:i32);
	setBitrate(bitrate:i32);
	setResolution(reso:i32);
	isCaptureModePhoto(interal:i32):bool;
	isCaptureImmediate(interal:i32):bool;
}

project_cell_gen = interface +c {
	static create(path:string, out_w:i32, out_h:i32):project_cell_gen;
	getPath():string;
	getName():string;
	getCreateTime():string;
	getLength():string;
	getFps():string;
}

publish_channel = enum {
	none;
	facebook;
	youtube;
	miaopai;
	youku;
}

project_list_gen = interface +c {
	static instance():project_list_gen;
	load(review_w:i32, review_h:i32):bool;
	getProjectAmount():i32;
	getProjectData(index:i32):project_cell_gen;
	selectProject(index:i32);
	deleteProject(index:i32);
	publishProject(index:i32, channel:publish_channel);
	saveProject(index:i32);
	watchProject(index:i32);
}
