// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from lapse.djinni

#import "LPAMoiveInfoGen+Private.h"
#import "LPAMoiveInfoGen.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LPAMoiveInfoGen ()

- (id)initWithCpp:(const std::shared_ptr<::lpase::MoiveInfoGen>&)cppRef;

@end

@implementation LPAMoiveInfoGen {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::lpase::MoiveInfoGen>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::lpase::MoiveInfoGen>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSString *)getName {
    try {
        auto r = _cppRefHandle.get()->getName();
        return ::djinni::String::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getFrameAmount {
    try {
        auto r = _cppRefHandle.get()->getFrameAmount();
        return ::djinni::I32::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getDurationSecond {
    try {
        auto r = _cppRefHandle.get()->getDurationSecond();
        return ::djinni::F32::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getFPS {
    try {
        auto r = _cppRefHandle.get()->getFPS();
        return ::djinni::F32::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getRecordLapse {
    try {
        auto r = _cppRefHandle.get()->getRecordLapse();
        return ::djinni::F32::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getRecordDuration {
    try {
        auto r = _cppRefHandle.get()->getRecordDuration();
        return ::djinni::F32::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)setName:(nonnull NSString *)name {
    try {
        auto r = _cppRefHandle.get()->setName(::djinni::String::toCpp(name));
        return ::djinni::Bool::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setFrameAmount:(int32_t)amount {
    try {
        _cppRefHandle.get()->setFrameAmount(::djinni::I32::toCpp(amount));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setDurationSecond:(float)seconds {
    try {
        _cppRefHandle.get()->setDurationSecond(::djinni::F32::toCpp(seconds));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setFPS:(float)fps {
    try {
        _cppRefHandle.get()->setFPS(::djinni::F32::toCpp(fps));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setRecordDuration:(float)duration {
    try {
        _cppRefHandle.get()->setRecordDuration(::djinni::F32::toCpp(duration));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setRecordLapse:(float)lapse {
    try {
        _cppRefHandle.get()->setRecordLapse(::djinni::F32::toCpp(lapse));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto MoiveInfoGen::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto MoiveInfoGen::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LPAMoiveInfoGen>(cpp);
}

}  // namespace djinni_generated

@end
