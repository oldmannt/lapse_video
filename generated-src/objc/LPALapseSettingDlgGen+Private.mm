// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from lapse.djinni

#import "LPALapseSettingDlgGen+Private.h"
#import "LPALapseSettingDlgGen.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LPALapseSettingDlgDelegate+Private.h"
#import "LPALapseSettingDlgGen+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LPALapseSettingDlgGen ()

- (id)initWithCpp:(const std::shared_ptr<::lpase::LapseSettingDlgGen>&)cppRef;

@end

@implementation LPALapseSettingDlgGen {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::lpase::LapseSettingDlgGen>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::lpase::LapseSettingDlgGen>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable LPALapseSettingDlgGen *)instance {
    try {
        auto r = ::lpase::LapseSettingDlgGen::instance();
        return ::djinni_generated::LapseSettingDlgGen::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onLoad:(nullable id<LPALapseSettingDlgDelegate>)delegate {
    try {
        _cppRefHandle.get()->onLoad(::djinni_generated::LapseSettingDlgDelegate::toCpp(delegate));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onShow {
    try {
        _cppRefHandle.get()->onShow();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)onFpsChange:(int32_t)fps {
    try {
        auto r = _cppRefHandle.get()->onFpsChange(::djinni::I32::toCpp(fps));
        return ::djinni::Bool::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)onLapseChange:(LPAIntervalMode)mode
                lapse:(float)lapse {
    try {
        auto r = _cppRefHandle.get()->onLapseChange(::djinni::Enum<::lpase::IntervalMode, LPAIntervalMode>::toCpp(mode),
                                                    ::djinni::F32::toCpp(lapse));
        return ::djinni::Bool::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onSelectInterval:(LPAIntervalMode)mode {
    try {
        _cppRefHandle.get()->onSelectInterval(::djinni::Enum<::lpase::IntervalMode, LPAIntervalMode>::toCpp(mode));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)onSave:(int32_t)fps
         lapse:(float)lapse
          mode:(LPAIntervalMode)mode {
    try {
        auto r = _cppRefHandle.get()->onSave(::djinni::I32::toCpp(fps),
                                             ::djinni::F32::toCpp(lapse),
                                             ::djinni::Enum<::lpase::IntervalMode, LPAIntervalMode>::toCpp(mode));
        return ::djinni::Bool::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto LapseSettingDlgGen::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto LapseSettingDlgGen::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LPALapseSettingDlgGen>(cpp);
}

}  // namespace djinni_generated

@end
