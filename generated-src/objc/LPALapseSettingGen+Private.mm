// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from lapse.djinni

#import "LPALapseSettingGen+Private.h"
#import "LPALapseSettingGen.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LPALapseSettingGen+Private.h"
#import "LPALapseSettingUiGen+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LPALapseSettingGen ()

- (id)initWithCpp:(const std::shared_ptr<::lpase::LapseSettingGen>&)cppRef;

@end

@implementation LPALapseSettingGen {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::lpase::LapseSettingGen>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::lpase::LapseSettingGen>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable LPALapseSettingGen *)instance {
    try {
        auto r = ::lpase::LapseSettingGen::instance();
        return ::djinni_generated::LapseSettingGen::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getQuickModeCount {
    try {
        auto r = _cppRefHandle.get()->getQuickModeCount();
        return ::djinni::I32::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getQuickModeName:(int32_t)index {
    try {
        auto r = _cppRefHandle.get()->getQuickModeName(::djinni::I32::toCpp(index));
        return ::djinni::String::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)selectQuickMode:(int32_t)index {
    try {
        _cppRefHandle.get()->selectQuickMode(::djinni::I32::toCpp(index));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setFps:(int32_t)fps {
    try {
        _cppRefHandle.get()->setFps(::djinni::I32::toCpp(fps));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setLapse:(int32_t)lapse {
    try {
        _cppRefHandle.get()->setLapse(::djinni::I32::toCpp(lapse));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onLoad:(nullable id<LPALapseSettingUiGen>)ui {
    try {
        _cppRefHandle.get()->onLoad(::djinni_generated::LapseSettingUiGen::toCpp(ui));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onShow {
    try {
        _cppRefHandle.get()->onShow();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onHide {
    try {
        _cppRefHandle.get()->onHide();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)clean {
    try {
        _cppRefHandle.get()->clean();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto LapseSettingGen::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto LapseSettingGen::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LPALapseSettingGen>(cpp);
}

}  // namespace djinni_generated

@end
