// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from lapse.djinni

#import "LPADataGen+Private.h"
#import "LPADataGen.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LPADataGen+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LPADataGen ()

- (id)initWithCpp:(const std::shared_ptr<::lpase::DataGen>&)cppRef;

@end

@implementation LPADataGen {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::lpase::DataGen>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::lpase::DataGen>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable LPADataGen *)instance {
    try {
        auto r = ::lpase::DataGen::instance();
        return ::djinni_generated::DataGen::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)initialize:(nonnull NSString *)config {
    try {
        auto r = _cppRefHandle.get()->initialize(::djinni::String::toCpp(config));
        return ::djinni::Bool::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getProjectsDir {
    try {
        auto r = _cppRefHandle.get()->getProjectsDir();
        return ::djinni::String::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getCaptureMode {
    try {
        auto r = _cppRefHandle.get()->getCaptureMode();
        return ::djinni::String::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setCaptureMode:(nonnull NSString *)mode {
    try {
        _cppRefHandle.get()->setCaptureMode(::djinni::String::toCpp(mode));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getCaptureIntevalMillsec {
    try {
        auto r = _cppRefHandle.get()->getCaptureIntevalMillsec();
        return ::djinni::I32::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getCaptureInteval {
    try {
        auto r = _cppRefHandle.get()->getCaptureInteval();
        return ::djinni::I32::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getCaptureIntevalUnit {
    try {
        auto r = _cppRefHandle.get()->getCaptureIntevalUnit();
        return ::djinni::String::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setCaptureInteval:(int32_t)value
                     unit:(nonnull NSString *)unit {
    try {
        _cppRefHandle.get()->setCaptureInteval(::djinni::I32::toCpp(value),
                                               ::djinni::String::toCpp(unit));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setCaptureIntervalQuickMode:(nonnull NSString *)mode {
    try {
        _cppRefHandle.get()->setCaptureIntervalQuickMode(::djinni::String::toCpp(mode));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getCaptureIntervalQuickMode {
    try {
        auto r = _cppRefHandle.get()->getCaptureIntervalQuickMode();
        return ::djinni::String::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getFps {
    try {
        auto r = _cppRefHandle.get()->getFps();
        return ::djinni::I32::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getBitrate {
    try {
        auto r = _cppRefHandle.get()->getBitrate();
        return ::djinni::I32::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getResolution {
    try {
        auto r = _cppRefHandle.get()->getResolution();
        return ::djinni::I32::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setFps:(int32_t)fps {
    try {
        _cppRefHandle.get()->setFps(::djinni::I32::toCpp(fps));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setBitrate:(int32_t)bitrate {
    try {
        _cppRefHandle.get()->setBitrate(::djinni::I32::toCpp(bitrate));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setResolution:(int32_t)reso {
    try {
        _cppRefHandle.get()->setResolution(::djinni::I32::toCpp(reso));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto DataGen::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto DataGen::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LPADataGen>(cpp);
}

}  // namespace djinni_generated

@end
