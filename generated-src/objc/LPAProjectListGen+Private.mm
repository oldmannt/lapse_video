// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from lapse.djinni

#import "LPAProjectListGen+Private.h"
#import "LPAProjectListGen.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LPAProjectCellGen+Private.h"
#import "LPAProjectListGen+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LPAProjectListGen ()

- (id)initWithCpp:(const std::shared_ptr<::lpase::ProjectListGen>&)cppRef;

@end

@implementation LPAProjectListGen {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::lpase::ProjectListGen>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::lpase::ProjectListGen>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable LPAProjectListGen *)instance {
    try {
        auto r = ::lpase::ProjectListGen::instance();
        return ::djinni_generated::ProjectListGen::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)load:(int32_t)reviewW
     reviewH:(int32_t)reviewH {
    try {
        auto r = _cppRefHandle.get()->load(::djinni::I32::toCpp(reviewW),
                                           ::djinni::I32::toCpp(reviewH));
        return ::djinni::Bool::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getProjectAmount {
    try {
        auto r = _cppRefHandle.get()->getProjectAmount();
        return ::djinni::I32::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LPAProjectCellGen *)getProjectData:(int32_t)index {
    try {
        auto r = _cppRefHandle.get()->getProjectData(::djinni::I32::toCpp(index));
        return ::djinni_generated::ProjectCellGen::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)selectPrject:(int32_t)index {
    try {
        _cppRefHandle.get()->selectPrject(::djinni::I32::toCpp(index));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto ProjectListGen::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto ProjectListGen::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LPAProjectListGen>(cpp);
}

}  // namespace djinni_generated

@end
