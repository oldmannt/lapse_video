// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from lapse.djinni

#import "LPAQuickModeGen+Private.h"
#import "LPAQuickModeGen.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LPAQuickModeGen+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LPAQuickModeGen ()

- (id)initWithCpp:(const std::shared_ptr<::lpase::QuickModeGen>&)cppRef;

@end

@implementation LPAQuickModeGen {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::lpase::QuickModeGen>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::lpase::QuickModeGen>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable LPAQuickModeGen *)create:(nonnull NSString *)name
                                 fps:(int32_t)fps
                            interval:(int32_t)interval {
    try {
        auto r = ::lpase::QuickModeGen::create(::djinni::String::toCpp(name),
                                               ::djinni::I32::toCpp(fps),
                                               ::djinni::I32::toCpp(interval));
        return ::djinni_generated::QuickModeGen::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getName {
    try {
        auto r = _cppRefHandle.get()->getName();
        return ::djinni::String::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getFps {
    try {
        auto r = _cppRefHandle.get()->getFps();
        return ::djinni::I32::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getInterval {
    try {
        auto r = _cppRefHandle.get()->getInterval();
        return ::djinni::I32::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto QuickModeGen::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto QuickModeGen::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LPAQuickModeGen>(cpp);
}

}  // namespace djinni_generated

@end
