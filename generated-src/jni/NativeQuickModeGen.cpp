// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from lapse.djinni

#include "NativeQuickModeGen.hpp"  // my header
#include "Marshal.hpp"
#include "NativeQuickModeGen.hpp"

namespace djinni_generated {

NativeQuickModeGen::NativeQuickModeGen() : ::djinni::JniInterface<::lpase::QuickModeGen, NativeQuickModeGen>("dyno/fun/lapse/QuickModeGen$CppProxy") {}

NativeQuickModeGen::~NativeQuickModeGen() = default;


CJNIEXPORT void JNICALL Java_dyno_fun_lapse_QuickModeGen_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::lpase::QuickModeGen>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_dyno_fun_lapse_QuickModeGen_create(JNIEnv* jniEnv, jobject /*this*/, jstring j_name, jint j_fps, jint j_interval)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::lpase::QuickModeGen::create(::djinni::String::toCpp(jniEnv, j_name),
                                               ::djinni::I32::toCpp(jniEnv, j_fps),
                                               ::djinni::I32::toCpp(jniEnv, j_interval));
        return ::djinni::release(::djinni_generated::NativeQuickModeGen::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_dyno_fun_lapse_QuickModeGen_00024CppProxy_native_1getName(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::lpase::QuickModeGen>(nativeRef);
        auto r = ref->getName();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_dyno_fun_lapse_QuickModeGen_00024CppProxy_native_1getFps(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::lpase::QuickModeGen>(nativeRef);
        auto r = ref->getFps();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_dyno_fun_lapse_QuickModeGen_00024CppProxy_native_1getInterval(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::lpase::QuickModeGen>(nativeRef);
        auto r = ref->getInterval();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
