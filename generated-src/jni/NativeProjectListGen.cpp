// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from lapse.djinni

#include "NativeProjectListGen.hpp"  // my header
#include "Marshal.hpp"
#include "NativeProjectCellGen.hpp"
#include "NativeProjectListGen.hpp"

namespace djinni_generated {

NativeProjectListGen::NativeProjectListGen() : ::djinni::JniInterface<::lpase::ProjectListGen, NativeProjectListGen>("dyno/fun/lapse/ProjectListGen$CppProxy") {}

NativeProjectListGen::~NativeProjectListGen() = default;


CJNIEXPORT void JNICALL Java_dyno_fun_lapse_ProjectListGen_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::lpase::ProjectListGen>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_dyno_fun_lapse_ProjectListGen_instance(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::lpase::ProjectListGen::instance();
        return ::djinni::release(::djinni_generated::NativeProjectListGen::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_dyno_fun_lapse_ProjectListGen_00024CppProxy_native_1load(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_reviewW, jint j_reviewH)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::lpase::ProjectListGen>(nativeRef);
        auto r = ref->load(::djinni::I32::toCpp(jniEnv, j_reviewW),
                           ::djinni::I32::toCpp(jniEnv, j_reviewH));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_dyno_fun_lapse_ProjectListGen_00024CppProxy_native_1getProjectAmount(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::lpase::ProjectListGen>(nativeRef);
        auto r = ref->getProjectAmount();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_dyno_fun_lapse_ProjectListGen_00024CppProxy_native_1getProjectData(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_index)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::lpase::ProjectListGen>(nativeRef);
        auto r = ref->getProjectData(::djinni::I32::toCpp(jniEnv, j_index));
        return ::djinni::release(::djinni_generated::NativeProjectCellGen::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_dyno_fun_lapse_ProjectListGen_00024CppProxy_native_1selectPrject(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_index)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::lpase::ProjectListGen>(nativeRef);
        ref->selectPrject(::djinni::I32::toCpp(jniEnv, j_index));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
