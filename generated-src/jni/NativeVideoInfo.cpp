// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from lapse.djinni

#include "NativeVideoInfo.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

NativeVideoInfo::NativeVideoInfo() = default;

NativeVideoInfo::~NativeVideoInfo() = default;

auto NativeVideoInfo::fromCpp(JNIEnv* jniEnv, const CppType& c) -> ::djinni::LocalRef<JniType> {
    const auto& data = ::djinni::JniClass<NativeVideoInfo>::get();
    auto r = ::djinni::LocalRef<JniType>{jniEnv->NewObject(data.clazz.get(), data.jconstructor,
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.interval)),
                                                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c.fps)),
                                                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c.resolution)),
                                                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c.exposure)),
                                                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c.iso)))};
    ::djinni::jniExceptionCheck(jniEnv);
    return r;
}

auto NativeVideoInfo::toCpp(JNIEnv* jniEnv, JniType j) -> CppType {
    ::djinni::JniLocalScope jscope(jniEnv, 6);
    assert(j != nullptr);
    const auto& data = ::djinni::JniClass<NativeVideoInfo>::get();
    return {::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_mInterval)),
            ::djinni::I32::toCpp(jniEnv, jniEnv->GetIntField(j, data.field_mFps)),
            ::djinni::I32::toCpp(jniEnv, jniEnv->GetIntField(j, data.field_mResolution)),
            ::djinni::I32::toCpp(jniEnv, jniEnv->GetIntField(j, data.field_mExposure)),
            ::djinni::I32::toCpp(jniEnv, jniEnv->GetIntField(j, data.field_mIso))};
}

}  // namespace djinni_generated
