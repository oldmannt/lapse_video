// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from lapse.djinni

#include "NativeLapseSettingGen.hpp"  // my header
#include "Marshal.hpp"
#include "NativeLapseSettingGen.hpp"
#include "NativeLapseSettingUiGen.hpp"

namespace djinni_generated {

NativeLapseSettingGen::NativeLapseSettingGen() : ::djinni::JniInterface<::lpase::LapseSettingGen, NativeLapseSettingGen>("dyno/fun/lapse/LapseSettingGen$CppProxy") {}

NativeLapseSettingGen::~NativeLapseSettingGen() = default;


CJNIEXPORT void JNICALL Java_dyno_fun_lapse_LapseSettingGen_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::lpase::LapseSettingGen>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_dyno_fun_lapse_LapseSettingGen_instance(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::lpase::LapseSettingGen::instance();
        return ::djinni::release(::djinni_generated::NativeLapseSettingGen::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_dyno_fun_lapse_LapseSettingGen_00024CppProxy_native_1getQuickModeCount(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::lpase::LapseSettingGen>(nativeRef);
        auto r = ref->getQuickModeCount();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_dyno_fun_lapse_LapseSettingGen_00024CppProxy_native_1getQuickModeName(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_index)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::lpase::LapseSettingGen>(nativeRef);
        auto r = ref->getQuickModeName(::djinni::I32::toCpp(jniEnv, j_index));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_dyno_fun_lapse_LapseSettingGen_00024CppProxy_native_1selectQuickMode(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_index)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::lpase::LapseSettingGen>(nativeRef);
        ref->selectQuickMode(::djinni::I32::toCpp(jniEnv, j_index));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_lapse_LapseSettingGen_00024CppProxy_native_1setFps(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_fps)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::lpase::LapseSettingGen>(nativeRef);
        ref->setFps(::djinni::I32::toCpp(jniEnv, j_fps));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_lapse_LapseSettingGen_00024CppProxy_native_1setLapse(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_lapse)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::lpase::LapseSettingGen>(nativeRef);
        ref->setLapse(::djinni::I32::toCpp(jniEnv, j_lapse));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_lapse_LapseSettingGen_00024CppProxy_native_1onLoad(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_ui)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::lpase::LapseSettingGen>(nativeRef);
        ref->onLoad(::djinni_generated::NativeLapseSettingUiGen::toCpp(jniEnv, j_ui));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_lapse_LapseSettingGen_00024CppProxy_native_1onShow(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::lpase::LapseSettingGen>(nativeRef);
        ref->onShow();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_lapse_LapseSettingGen_00024CppProxy_native_1onHide(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::lpase::LapseSettingGen>(nativeRef);
        ref->onHide();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_lapse_LapseSettingGen_00024CppProxy_native_1clean(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::lpase::LapseSettingGen>(nativeRef);
        ref->clean();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
