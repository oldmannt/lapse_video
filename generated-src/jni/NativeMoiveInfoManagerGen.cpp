// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from lapse.djinni

#include "NativeMoiveInfoManagerGen.hpp"  // my header
#include "Marshal.hpp"
#include "NativeMoiveInfoGen.hpp"
#include "NativeMoiveInfoManagerGen.hpp"

namespace djinni_generated {

NativeMoiveInfoManagerGen::NativeMoiveInfoManagerGen() : ::djinni::JniInterface<::lpase::MoiveInfoManagerGen, NativeMoiveInfoManagerGen>("dyno/fun/lapse/MoiveInfoManagerGen$CppProxy") {}

NativeMoiveInfoManagerGen::~NativeMoiveInfoManagerGen() = default;


CJNIEXPORT void JNICALL Java_dyno_fun_lapse_MoiveInfoManagerGen_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::lpase::MoiveInfoManagerGen>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_dyno_fun_lapse_MoiveInfoManagerGen_instance(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::lpase::MoiveInfoManagerGen::instance();
        return ::djinni::release(::djinni_generated::NativeMoiveInfoManagerGen::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_dyno_fun_lapse_MoiveInfoManagerGen_00024CppProxy_native_1initialize(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_config)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::lpase::MoiveInfoManagerGen>(nativeRef);
        auto r = ref->initialize(::djinni::String::toCpp(jniEnv, j_config));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_dyno_fun_lapse_MoiveInfoManagerGen_00024CppProxy_native_1createMoiveInfo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_path)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::lpase::MoiveInfoManagerGen>(nativeRef);
        auto r = ref->createMoiveInfo(::djinni::String::toCpp(jniEnv, j_path));
        return ::djinni::release(::djinni_generated::NativeMoiveInfoGen::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_dyno_fun_lapse_MoiveInfoManagerGen_00024CppProxy_native_1findMoiveInfo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_name)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::lpase::MoiveInfoManagerGen>(nativeRef);
        auto r = ref->findMoiveInfo(::djinni::String::toCpp(jniEnv, j_name));
        return ::djinni::release(::djinni_generated::NativeMoiveInfoGen::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_dyno_fun_lapse_MoiveInfoManagerGen_00024CppProxy_native_1removeMoiveInfo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_name)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::lpase::MoiveInfoManagerGen>(nativeRef);
        ref->removeMoiveInfo(::djinni::String::toCpp(jniEnv, j_name));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_dyno_fun_lapse_MoiveInfoManagerGen_00024CppProxy_native_1save(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::lpase::MoiveInfoManagerGen>(nativeRef);
        ref->save();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
