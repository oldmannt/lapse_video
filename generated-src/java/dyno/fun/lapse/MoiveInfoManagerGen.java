// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from lapse.djinni

package dyno.fun.lapse;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class MoiveInfoManagerGen {
    public abstract boolean initialize(String config);

    public abstract MoiveInfoGen createMoiveInfo(String path);

    public abstract MoiveInfoGen findMoiveInfo(String name);

    public abstract void removeMoiveInfo(String name);

    public abstract void save();

    public static native MoiveInfoManagerGen instance();

    private static final class CppProxy extends MoiveInfoManagerGen
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public boolean initialize(String config)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_initialize(this.nativeRef, config);
        }
        private native boolean native_initialize(long _nativeRef, String config);

        @Override
        public MoiveInfoGen createMoiveInfo(String path)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_createMoiveInfo(this.nativeRef, path);
        }
        private native MoiveInfoGen native_createMoiveInfo(long _nativeRef, String path);

        @Override
        public MoiveInfoGen findMoiveInfo(String name)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_findMoiveInfo(this.nativeRef, name);
        }
        private native MoiveInfoGen native_findMoiveInfo(long _nativeRef, String name);

        @Override
        public void removeMoiveInfo(String name)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeMoiveInfo(this.nativeRef, name);
        }
        private native void native_removeMoiveInfo(long _nativeRef, String name);

        @Override
        public void save()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_save(this.nativeRef);
        }
        private native void native_save(long _nativeRef);
    }
}
