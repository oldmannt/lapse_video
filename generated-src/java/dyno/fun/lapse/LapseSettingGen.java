// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from lapse.djinni

package dyno.fun.lapse;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class LapseSettingGen {
    public abstract int getQuickModeCount();

    public abstract String getQuickModeName(int index);

    public abstract void selectQuickMode(int index);

    public abstract void setFps(int fps);

    public abstract void setLapse(int lapse);

    public abstract void onLoad(LapseSettingUiGen ui);

    public abstract void onShow();

    public abstract void onHide();

    public abstract void clean();

    public static native LapseSettingGen instance();

    private static final class CppProxy extends LapseSettingGen
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public int getQuickModeCount()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getQuickModeCount(this.nativeRef);
        }
        private native int native_getQuickModeCount(long _nativeRef);

        @Override
        public String getQuickModeName(int index)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getQuickModeName(this.nativeRef, index);
        }
        private native String native_getQuickModeName(long _nativeRef, int index);

        @Override
        public void selectQuickMode(int index)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_selectQuickMode(this.nativeRef, index);
        }
        private native void native_selectQuickMode(long _nativeRef, int index);

        @Override
        public void setFps(int fps)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setFps(this.nativeRef, fps);
        }
        private native void native_setFps(long _nativeRef, int fps);

        @Override
        public void setLapse(int lapse)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setLapse(this.nativeRef, lapse);
        }
        private native void native_setLapse(long _nativeRef, int lapse);

        @Override
        public void onLoad(LapseSettingUiGen ui)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onLoad(this.nativeRef, ui);
        }
        private native void native_onLoad(long _nativeRef, LapseSettingUiGen ui);

        @Override
        public void onShow()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onShow(this.nativeRef);
        }
        private native void native_onShow(long _nativeRef);

        @Override
        public void onHide()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onHide(this.nativeRef);
        }
        private native void native_onHide(long _nativeRef);

        @Override
        public void clean()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_clean(this.nativeRef);
        }
        private native void native_clean(long _nativeRef);
    }
}
