// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from lapse.djinni

package dyno.fun.lapse;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class ProjectListGen {
    public abstract boolean load(int reviewW, int reviewH);

    public abstract int getProjectAmount();

    public abstract ProjectCellGen getProjectData(int index);

    public abstract void selectPrject(int index);

    public static native ProjectListGen instance();

    private static final class CppProxy extends ProjectListGen
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public boolean load(int reviewW, int reviewH)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_load(this.nativeRef, reviewW, reviewH);
        }
        private native boolean native_load(long _nativeRef, int reviewW, int reviewH);

        @Override
        public int getProjectAmount()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getProjectAmount(this.nativeRef);
        }
        private native int native_getProjectAmount(long _nativeRef);

        @Override
        public ProjectCellGen getProjectData(int index)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getProjectData(this.nativeRef, index);
        }
        private native ProjectCellGen native_getProjectData(long _nativeRef, int index);

        @Override
        public void selectPrject(int index)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_selectPrject(this.nativeRef, index);
        }
        private native void native_selectPrject(long _nativeRef, int index);
    }
}
