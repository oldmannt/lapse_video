// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from lapse.djinni

package dyno.fun.lapse;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class LapseSettingDlgGen {
    public abstract void onLoad(LapseSettingDlgDelegate delegate);

    public abstract void onShow();

    public abstract boolean onFpsChange(int fps);

    public abstract boolean onLapseChange(IntervalMode mode, float lapse);

    public abstract void onSelectInterval(IntervalMode mode);

    public abstract boolean onSave(int fps, float lapse, IntervalMode mode);

    public static native LapseSettingDlgGen instance();

    private static final class CppProxy extends LapseSettingDlgGen
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void onLoad(LapseSettingDlgDelegate delegate)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onLoad(this.nativeRef, delegate);
        }
        private native void native_onLoad(long _nativeRef, LapseSettingDlgDelegate delegate);

        @Override
        public void onShow()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onShow(this.nativeRef);
        }
        private native void native_onShow(long _nativeRef);

        @Override
        public boolean onFpsChange(int fps)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_onFpsChange(this.nativeRef, fps);
        }
        private native boolean native_onFpsChange(long _nativeRef, int fps);

        @Override
        public boolean onLapseChange(IntervalMode mode, float lapse)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_onLapseChange(this.nativeRef, mode, lapse);
        }
        private native boolean native_onLapseChange(long _nativeRef, IntervalMode mode, float lapse);

        @Override
        public void onSelectInterval(IntervalMode mode)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onSelectInterval(this.nativeRef, mode);
        }
        private native void native_onSelectInterval(long _nativeRef, IntervalMode mode);

        @Override
        public boolean onSave(int fps, float lapse, IntervalMode mode)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_onSave(this.nativeRef, fps, lapse, mode);
        }
        private native boolean native_onSave(long _nativeRef, int fps, float lapse, IntervalMode mode);
    }
}
