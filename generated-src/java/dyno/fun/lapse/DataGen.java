// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from lapse.djinni

package dyno.fun.lapse;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class DataGen {
    public abstract boolean initialize(String config);

    public abstract String getProjectsDir();

    public abstract String getCaptureMode();

    public abstract void setCaptureMode(String mode);

    public abstract int getCaptureIntevalMillsec();

    public abstract int getCaptureInteval();

    public abstract String getCaptureIntevalUnit();

    public abstract void setCaptureInteval(int value, String unit);

    public abstract void setCaptureIntervalQuickMode(String mode);

    public abstract String getCaptureIntervalQuickMode();

    public abstract int getFps();

    public abstract int getBitrate();

    public abstract int getResolution();

    public abstract void setFps(int fps);

    public abstract void setBitrate(int bitrate);

    public abstract void setResolution(int reso);

    public abstract boolean isCaptureModePhoto(int interal);

    public abstract boolean isCaptureImmediate(int interal);

    public abstract int getMaxFps();

    public abstract int getMinFps();

    public abstract int getMinInterval();

    public abstract int getMaxInterval();

    public abstract int getMinLapse();

    public abstract int getDefaultLapse();

    public abstract int getQuickModeCount();

    public abstract QuickModeGen getQuickMode(int index);

    public abstract void selectQuickMode(int index);

    public abstract int getCurrentQickMode();

    public abstract int getUiInfoUpdateRate();

    /** for message which is relevant to language  */
    public abstract String getFpsRangeAlert();

    public abstract String getLapseRangeAlert();

    public abstract String getSlomoRangeAlert();

    public static native DataGen instance();

    private static final class CppProxy extends DataGen
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public boolean initialize(String config)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_initialize(this.nativeRef, config);
        }
        private native boolean native_initialize(long _nativeRef, String config);

        @Override
        public String getProjectsDir()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getProjectsDir(this.nativeRef);
        }
        private native String native_getProjectsDir(long _nativeRef);

        @Override
        public String getCaptureMode()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCaptureMode(this.nativeRef);
        }
        private native String native_getCaptureMode(long _nativeRef);

        @Override
        public void setCaptureMode(String mode)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setCaptureMode(this.nativeRef, mode);
        }
        private native void native_setCaptureMode(long _nativeRef, String mode);

        @Override
        public int getCaptureIntevalMillsec()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCaptureIntevalMillsec(this.nativeRef);
        }
        private native int native_getCaptureIntevalMillsec(long _nativeRef);

        @Override
        public int getCaptureInteval()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCaptureInteval(this.nativeRef);
        }
        private native int native_getCaptureInteval(long _nativeRef);

        @Override
        public String getCaptureIntevalUnit()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCaptureIntevalUnit(this.nativeRef);
        }
        private native String native_getCaptureIntevalUnit(long _nativeRef);

        @Override
        public void setCaptureInteval(int value, String unit)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setCaptureInteval(this.nativeRef, value, unit);
        }
        private native void native_setCaptureInteval(long _nativeRef, int value, String unit);

        @Override
        public void setCaptureIntervalQuickMode(String mode)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setCaptureIntervalQuickMode(this.nativeRef, mode);
        }
        private native void native_setCaptureIntervalQuickMode(long _nativeRef, String mode);

        @Override
        public String getCaptureIntervalQuickMode()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCaptureIntervalQuickMode(this.nativeRef);
        }
        private native String native_getCaptureIntervalQuickMode(long _nativeRef);

        @Override
        public int getFps()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getFps(this.nativeRef);
        }
        private native int native_getFps(long _nativeRef);

        @Override
        public int getBitrate()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getBitrate(this.nativeRef);
        }
        private native int native_getBitrate(long _nativeRef);

        @Override
        public int getResolution()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getResolution(this.nativeRef);
        }
        private native int native_getResolution(long _nativeRef);

        @Override
        public void setFps(int fps)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setFps(this.nativeRef, fps);
        }
        private native void native_setFps(long _nativeRef, int fps);

        @Override
        public void setBitrate(int bitrate)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setBitrate(this.nativeRef, bitrate);
        }
        private native void native_setBitrate(long _nativeRef, int bitrate);

        @Override
        public void setResolution(int reso)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setResolution(this.nativeRef, reso);
        }
        private native void native_setResolution(long _nativeRef, int reso);

        @Override
        public boolean isCaptureModePhoto(int interal)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isCaptureModePhoto(this.nativeRef, interal);
        }
        private native boolean native_isCaptureModePhoto(long _nativeRef, int interal);

        @Override
        public boolean isCaptureImmediate(int interal)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isCaptureImmediate(this.nativeRef, interal);
        }
        private native boolean native_isCaptureImmediate(long _nativeRef, int interal);

        @Override
        public int getMaxFps()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getMaxFps(this.nativeRef);
        }
        private native int native_getMaxFps(long _nativeRef);

        @Override
        public int getMinFps()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getMinFps(this.nativeRef);
        }
        private native int native_getMinFps(long _nativeRef);

        @Override
        public int getMinInterval()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getMinInterval(this.nativeRef);
        }
        private native int native_getMinInterval(long _nativeRef);

        @Override
        public int getMaxInterval()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getMaxInterval(this.nativeRef);
        }
        private native int native_getMaxInterval(long _nativeRef);

        @Override
        public int getMinLapse()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getMinLapse(this.nativeRef);
        }
        private native int native_getMinLapse(long _nativeRef);

        @Override
        public int getDefaultLapse()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getDefaultLapse(this.nativeRef);
        }
        private native int native_getDefaultLapse(long _nativeRef);

        @Override
        public int getQuickModeCount()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getQuickModeCount(this.nativeRef);
        }
        private native int native_getQuickModeCount(long _nativeRef);

        @Override
        public QuickModeGen getQuickMode(int index)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getQuickMode(this.nativeRef, index);
        }
        private native QuickModeGen native_getQuickMode(long _nativeRef, int index);

        @Override
        public void selectQuickMode(int index)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_selectQuickMode(this.nativeRef, index);
        }
        private native void native_selectQuickMode(long _nativeRef, int index);

        @Override
        public int getCurrentQickMode()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCurrentQickMode(this.nativeRef);
        }
        private native int native_getCurrentQickMode(long _nativeRef);

        @Override
        public int getUiInfoUpdateRate()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getUiInfoUpdateRate(this.nativeRef);
        }
        private native int native_getUiInfoUpdateRate(long _nativeRef);

        @Override
        public String getFpsRangeAlert()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getFpsRangeAlert(this.nativeRef);
        }
        private native String native_getFpsRangeAlert(long _nativeRef);

        @Override
        public String getLapseRangeAlert()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getLapseRangeAlert(this.nativeRef);
        }
        private native String native_getLapseRangeAlert(long _nativeRef);

        @Override
        public String getSlomoRangeAlert()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getSlomoRangeAlert(this.nativeRef);
        }
        private native String native_getSlomoRangeAlert(long _nativeRef);
    }
}
